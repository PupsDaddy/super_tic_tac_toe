import pygamefrom src.constants import *class Infrastructure:    def __init__(self):        pygame.init()        pygame.display.set_caption("Super tic tac toe")        self.screen = pygame.display.set_mode([WIDTH, HEIGHT])        self.clock = pygame.time.Clock()        self.font = pygame.font.Font(None, SCALE)        self.mouse_coordinates = None    def is_quit_event(self) -> bool:        for event in pygame.event.get():            if event.type == pygame.QUIT:                return True            elif event.type == pygame.MOUSEBUTTONDOWN:                self.mouse_coordinates = event.pos        return False    def fill_screen(self):        self.screen.fill(SCREEN_COLOR)    def draw_circle(self, coordinates, SCALE=SCALE, width=3):        center = (coordinates[0] + SCALE // 2, coordinates[1] + SCALE // 2)        radius = (SCALE // 2) - SCALE // 10        pygame.draw.circle(self.screen,                           pygame.Color(CIRCLE_COLOR),                           center, radius, width)    def draw_cross(self, coordinates, SCALE=SCALE, width=4):        first_line_start_point = (coordinates[0] + SCALE // 7,  coordinates[1] + SCALE // 7)        first_line_end_point = (coordinates[0] + SCALE - SCALE // 7, coordinates[1] + SCALE - SCALE // 7)        second_line_start_point = (coordinates[0] + SCALE // 7, coordinates[1] + SCALE - SCALE // 7)        second_line_end_point = (coordinates[0] + SCALE - SCALE // 7, coordinates[1] + SCALE // 7)        pygame.draw.line(self.screen,                         pygame.Color(CROSS_COLOR),                         first_line_start_point,                         first_line_end_point, width)        pygame.draw.line(self.screen,                         pygame.Color(CROSS_COLOR),                         second_line_start_point,                         second_line_end_point, width)    def draw_game_lines(self, center, color ,width, game_type):        first_line_start_point = (center[0] - SCALE, center[1] + (game_type + 1) * SCALE)        first_line_end_point = (center[0] - SCALE, center[1] - game_type * SCALE)        second_line_start_point = (center[0] + 2 * SCALE, center[1] + (game_type + 1) * SCALE)        second_line_end_point = (center[0] + 2 * SCALE, center[1] - game_type * SCALE)        third_line_start_point = (center[0] - game_type * SCALE, center[1] + 2 * SCALE)        third_line_end_point = (center[0] + (game_type + 1) * SCALE, center[1] + 2 * SCALE)        fourth_line_start_point = (center[0] - game_type * SCALE, center[1] - SCALE)        fourth_line_end_point = (center[0] + (game_type + 1) * SCALE, center[1] - SCALE)        pygame.draw.line(self.screen,                         pygame.Color(color),                         first_line_start_point,                         first_line_end_point, width)        pygame.draw.line(self.screen,                         pygame.Color(color),                         second_line_start_point,                         second_line_end_point, width)        pygame.draw.line(self.screen,                         pygame.Color(color),                         third_line_start_point,                         third_line_end_point, width)        pygame.draw.line(self.screen,                         pygame.Color(color),                         fourth_line_start_point,                         fourth_line_end_point, width)    def draw_element(self, coordinates, color=ELEMENT_COLOR, ELEMENT_SIZE=ELEMENT_SIZE):        pygame.draw.rect(self.screen, pygame.Color(color),                         (coordinates[0], coordinates[1], ELEMENT_SIZE, ELEMENT_SIZE), 0, 1)    def draw_whose_step(self, whose_step:int):        player = None        color = None        if whose_step == 1:            player = 1            color = CROSS_COLOR        elif whose_step == -1:            player = 2            color = CIRCLE_COLOR        self.screen.blit(            self.font.render(f"Player {player} moves", True, pygame.Color(color)),            (WIDTH // 2 - SCALE // 2 - 2 * SCALE, SCALE * 2 // 3),        )    def draw_game_over(self, value):        if value == 0:            message = self.font.render("IT'S A DRAW!", True, pygame.Color('green'))        elif value == 1:            message = self.font.render("PLAYER 1 WON!", True, pygame.Color('red'))        elif value == -1:            message = self.font.render("PLAYER 2 WON!", True, pygame.Color('blue'))        center = (WIDTH // 2 - SCALE // 2, HEIGHT // 2 - SCALE // 2)        surf = pygame.Surface((WIDTH, HEIGHT // 5))        surf.fill('white')        self.screen.blit(surf, (0, center[1] - SCALE))        self.screen.blit(            message,            message.get_rect(center=center)        )    def update_and_tick(self):        pygame.display.update()        self.clock.tick(FPS)    def quit(self):        pygame.quit()