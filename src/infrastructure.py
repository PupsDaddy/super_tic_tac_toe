from distutils.command.build_scripts import first_line_reimport pygamefrom constants import *class Infrastructure:    def __init__(self):        pygame.init()        self.screen = pygame.display.set_mode([WIDTH, HEIGHT])        self.clock = pygame.time.Clock()        self.font = pygame.font.Font(None, SCALE)        self.mouse_coordinates = (float('inf'), float('inf'))    def is_quit_event(self) -> bool:        for event in pygame.event.get():            if event.type == pygame.QUIT:                return True            elif event.type == pygame.MOUSEBUTTONDOWN:                self.mouse_coordinates = event.pos        return False    def fill_screen(self):        self.screen.fill(SCREEN_COLOR)    def draw_circle(self, coordinates):        center = (coordinates[0] + SCALE // 2, coordinates[1] - SCALE // 2)        radius = (SCALE // 2) - 2        pygame.draw.circle(self.screen,                           pygame.Color(CIRCLE_COLOR),                           center, radius, 2)    def draw_cross(self, coordinates):        first_line_start_point = coordinates        first_line_end_point = (coordinates[0] + SCALE, coordinates[1] - SCALE)        second_line_start_point = (coordinates[0], coordinates[1] - SCALE)        second_line_end_point = (coordinates[0] + SCALE, coordinates[1])        pygame.draw.line(self.screen,                         pygame.Color(CROSS_COLOR),                         first_line_start_point,                         first_line_end_point, 2)        pygame.draw.line(self.screen,                         pygame.Color(CROSS_COLOR),                         second_line_start_point,                         second_line_end_point, 2)    def draw_game_lines(self, center, color ,width, game_type):        first_line_start_point = (center[0] - SCALE, center[1] + game_type * SCALE)        first_line_end_point = (center[0] - SCALE, center[1] - game_type * SCALE)        second_line_start_point = (center[0] + SCALE, center[1] + game_type * SCALE)        second_line_end_point = (center[0] + SCALE, center[1] - game_type * SCALE)        third_line_start_point = (center[0] - game_type * SCALE, center[1] + SCALE)        third_line_end_point = (center[0] + game_type * SCALE, center[1] + SCALE)        fourth_line_start_point = (center[0] - game_type * SCALE, center[1] - SCALE)        fourth_line_end_point = (center[0] + game_type * SCALE, center[1] - SCALE)        pygame.draw.line(self.screen,                         pygame.Color(color),                         first_line_start_point,                         first_line_end_point, width)        pygame.draw.line(self.screen,                         pygame.Color(color),                         second_line_start_point,                         second_line_end_point, width)        pygame.draw.line(self.screen,                         pygame.Color(color),                         third_line_start_point,                         third_line_end_point, width)        pygame.draw.line(self.screen,                         pygame.Color(color),                         fourth_line_start_point,                         fourth_line_end_point, width)    def draw_element(self, coordinates):        pygame.draw.rect(self.screen, pygame.Color(ELEMENT_COLOR),                         (coordinates[0], coordinates[1], ELEMENT_SIZE, ELEMENT_SIZE), 0, 1)    def draw_winner_line(self):        pass    def draw_game_over(self, winner):        message = self.font.render(f'{winner}', True, pygame.Color('red'))        self.screen.blit(            message,            message.get_rect(center=(WIDTH // 2, HEIGHT // 2))        )    def update_and_tick(self):        pygame.display.update()        self.clock.tick(FPS)    def quit(self):        pygame.quit()