from src.infrastructure import Infrastructurefrom src.constants import *from src.global_game import GlobalGameclass Game:    def __init__(self, infrastructure:Infrastructure):        self.is_running = True        self.infrastructure = infrastructure        self.game = GlobalGame()        self.is_game_over = False    def process_events(self):        if self.infrastructure.is_quit_event():            self.is_running = False    def render(self):        self.infrastructure.fill_screen()        self.infrastructure.draw_whose_step(self.game.whose_step)        for local_game in self.game.local_game_list:            for el in local_game:                if self.game.local_game_list.index(local_game) in self.game.accessible_local_games_indexes:                    color = None                    if self.game.whose_step == 1:                        color = LIGHT_RED                    elif self.game.whose_step == -1:                        color = LIGHT_BLUE                    self.infrastructure.draw_element(el.get_coordinates(), color)                else:                    self.infrastructure.draw_element((el.x, el.y))                if el.value == 1:                    self.infrastructure.draw_cross((el.x, el.y))                elif el.value == -1:                    self.infrastructure.draw_circle((el.x, el.y))            self.infrastructure.draw_game_lines((local_game[4].x, local_game[4].y), LOCAL_GAME_LINE_COLOR, 2, 1)        self.infrastructure.draw_game_lines((WIDTH // 2 - 8 * SCALE // 2, HEIGHT // 2 - SCALE // 2), GLOBAL_GAME_LINE_COLOR, 5, 4)        self.infrastructure.update_and_tick()    def update_state(self):        if self.is_game_over:            return        print(self.game.accessible_local_games_indexes)        self.game.one_move(self.infrastructure.mouse_coordinates)        print(self.infrastructure.mouse_coordinates)        self.infrastructure.mouse_coordinates = None    def loop(self):        while self.is_running:            self.process_events()            self.update_state()            self.render()        self.infrastructure.quit()